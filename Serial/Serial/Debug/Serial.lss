
Serial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000110  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000034  00800060  00000110  00000184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001e8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000722  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000607  00000000  00000000  0000097e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002e3  00000000  00000000  00000f85  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000060  00000000  00000000  00001268  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000034d  00000000  00000000  000012c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000081  00000000  00000000  00001615  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001696  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e1       	ldi	r30, 0x10	; 16
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 39       	cpi	r26, 0x94	; 148
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 61 00 	call	0xc2	; 0xc2 <main>
  7a:	0c 94 86 00 	jmp	0x10c	; 0x10c <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <usart_init>:
#include <avr/io.h>
#include <util/delay.h>
#define baudrate 12 // can be bigger values
void usart_init()
{
	UCSRB |= (1<<TXEN) | (1<<RXEN) ;//page 212
  82:	8a b1       	in	r24, 0x0a	; 10
  84:	88 61       	ori	r24, 0x18	; 24
  86:	8a b9       	out	0x0a, r24	; 10
	UBRRL = baudrate ; //page 217 // lower eight bits
  88:	8c e0       	ldi	r24, 0x0C	; 12
  8a:	89 b9       	out	0x09, r24	; 9
	UBRRH = baudrate >> 8 ; // higher eight bits
  8c:	10 bc       	out	0x20, r1	; 32
	UCSRC |= 1 << URSEL ; // enable
  8e:	80 b5       	in	r24, 0x20	; 32
  90:	80 68       	ori	r24, 0x80	; 128
  92:	80 bd       	out	0x20, r24	; 32
	UCSRC |= (1 << UCSZ1) | (1 << UCSZ0); // page 214-215 // data size selection
  94:	80 b5       	in	r24, 0x20	; 32
  96:	86 60       	ori	r24, 0x06	; 6
  98:	80 bd       	out	0x20, r24	; 32
  9a:	08 95       	ret

0000009c <usart_send>:
}

void usart_send(char data)
{
	while(!(UCSRA & (1 << UDRE))); // page 210, wait till data buffer is empty, udre is flag
  9c:	5d 9b       	sbis	0x0b, 5	; 11
  9e:	fe cf       	rjmp	.-4      	; 0x9c <usart_send>
	UDR = data ;
  a0:	8c b9       	out	0x0c, r24	; 12
  a2:	08 95       	ret

000000a4 <usart_send_string>:
}

void usart_send_string(char *text)
{
  a4:	cf 93       	push	r28
  a6:	df 93       	push	r29
  a8:	ec 01       	movw	r28, r24
	while(*text != '\0')
  aa:	88 81       	ld	r24, Y
  ac:	88 23       	and	r24, r24
  ae:	31 f0       	breq	.+12     	; 0xbc <usart_send_string+0x18>
  b0:	21 96       	adiw	r28, 0x01	; 1
	{
		usart_send(*text);
  b2:	0e 94 4e 00 	call	0x9c	; 0x9c <usart_send>
	UDR = data ;
}

void usart_send_string(char *text)
{
	while(*text != '\0')
  b6:	89 91       	ld	r24, Y+
  b8:	81 11       	cpse	r24, r1
  ba:	fb cf       	rjmp	.-10     	; 0xb2 <usart_send_string+0xe>
	{
		usart_send(*text);
		text ++ ;
	}
}
  bc:	df 91       	pop	r29
  be:	cf 91       	pop	r28
  c0:	08 95       	ret

000000c2 <main>:

int main(void)
{
	usart_init();//always sends ascii value
  c2:	0e 94 41 00 	call	0x82	; 0x82 <usart_init>
	while(1)
	{
		usart_send('A');
  c6:	81 e4       	ldi	r24, 0x41	; 65
  c8:	0e 94 4e 00 	call	0x9c	; 0x9c <usart_send>
		usart_send('B');
  cc:	82 e4       	ldi	r24, 0x42	; 66
  ce:	0e 94 4e 00 	call	0x9c	; 0x9c <usart_send>
		usart_send('C');
  d2:	83 e4       	ldi	r24, 0x43	; 67
  d4:	0e 94 4e 00 	call	0x9c	; 0x9c <usart_send>
		usart_send_string("Hello there. The temperature today is");
  d8:	80 e6       	ldi	r24, 0x60	; 96
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	0e 94 52 00 	call	0xa4	; 0xa4 <usart_send_string>
		usart_send_string("\t");
  e0:	86 e8       	ldi	r24, 0x86	; 134
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	0e 94 52 00 	call	0xa4	; 0xa4 <usart_send_string>
		usart_send_string("38 degree");
  e8:	88 e8       	ldi	r24, 0x88	; 136
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	0e 94 52 00 	call	0xa4	; 0xa4 <usart_send_string>
		usart_send_string("\n");
  f0:	82 e9       	ldi	r24, 0x92	; 146
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	0e 94 52 00 	call	0xa4	; 0xa4 <usart_send_string>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f8:	2f e3       	ldi	r18, 0x3F	; 63
  fa:	8d e0       	ldi	r24, 0x0D	; 13
  fc:	93 e0       	ldi	r25, 0x03	; 3
  fe:	21 50       	subi	r18, 0x01	; 1
 100:	80 40       	sbci	r24, 0x00	; 0
 102:	90 40       	sbci	r25, 0x00	; 0
 104:	e1 f7       	brne	.-8      	; 0xfe <main+0x3c>
 106:	00 c0       	rjmp	.+0      	; 0x108 <main+0x46>
 108:	00 00       	nop
 10a:	dd cf       	rjmp	.-70     	; 0xc6 <main+0x4>

0000010c <_exit>:
 10c:	f8 94       	cli

0000010e <__stop_program>:
 10e:	ff cf       	rjmp	.-2      	; 0x10e <__stop_program>
