
Servo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000a8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000fc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000012c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000168  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000578  00000000  00000000  00000188  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004f6  00000000  00000000  00000700  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001ea  00000000  00000000  00000bf6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000de0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002d7  00000000  00000000  00000e04  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  000010db  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 52 00 	jmp	0xa4	; 0xa4 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <avr/io.h>


int main(void)
{
    DDRB |= (1<<PB1) | (1<<PB2) ; // OC1A and OC1B are set as output mode
  6c:	87 b3       	in	r24, 0x17	; 23
  6e:	86 60       	ori	r24, 0x06	; 6
  70:	87 bb       	out	0x17, r24	; 23
	TCCR1B |= 1<<CS11 ; //Prescalar 8
  72:	8e b5       	in	r24, 0x2e	; 46
  74:	82 60       	ori	r24, 0x02	; 2
  76:	8e bd       	out	0x2e, r24	; 46
	ICR1 = 2499 ; // Top value for 50Hz PWM , ICR == Input compare register
  78:	83 ec       	ldi	r24, 0xC3	; 195
  7a:	99 e0       	ldi	r25, 0x09	; 9
  7c:	97 bd       	out	0x27, r25	; 39
  7e:	86 bd       	out	0x26, r24	; 38
	TCCR1B |= (1<<WGM13) | (1<<WGM12) ;//fast pwm
  80:	8e b5       	in	r24, 0x2e	; 46
  82:	88 61       	ori	r24, 0x18	; 24
  84:	8e bd       	out	0x2e, r24	; 46
	TCCR1A |= (1<<WGM11) ;//fast pwm
  86:	8f b5       	in	r24, 0x2f	; 47
  88:	82 60       	ori	r24, 0x02	; 2
  8a:	8f bd       	out	0x2f, r24	; 47
	OCR1A = 500 ;
  8c:	84 ef       	ldi	r24, 0xF4	; 244
  8e:	91 e0       	ldi	r25, 0x01	; 1
  90:	9b bd       	out	0x2b, r25	; 43
  92:	8a bd       	out	0x2a, r24	; 42
	OCR1B = 90 ;
  94:	8a e5       	ldi	r24, 0x5A	; 90
  96:	90 e0       	ldi	r25, 0x00	; 0
  98:	99 bd       	out	0x29, r25	; 41
  9a:	88 bd       	out	0x28, r24	; 40
	TCCR1A |= 1<<COM1A1 ;//clear on compare match
  9c:	8f b5       	in	r24, 0x2f	; 47
  9e:	80 68       	ori	r24, 0x80	; 128
  a0:	8f bd       	out	0x2f, r24	; 47
	
	 while (1) 
    {
    }
  a2:	ff cf       	rjmp	.-2      	; 0xa2 <main+0x36>

000000a4 <_exit>:
  a4:	f8 94       	cli

000000a6 <__stop_program>:
  a6:	ff cf       	rjmp	.-2      	; 0xa6 <__stop_program>
